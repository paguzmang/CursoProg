[["index.html", "Programación básica para las ciencias de la vida Con aplicaciones en R y Phyton Presentación", " Programación básica para las ciencias de la vida Con aplicaciones en R y Phyton Pablo Andrés Guzmán; Juan Alberto AriasPrograma de Biología - U.CES Feb 2023 (Importante: Actualmente en construcción. No usar) Presentación En esta cartilla desarrollamos un curso básico en Programación (computacional) dirigido a estudiantes de pregrado en ciencias biológicas y afines. Hace años, un curso sobre Programación en este tipo de pregrados podría parecer algo extraño. Historicamente la Programación ha sido un tema de pregrados en ciencias matemáticas o de la Ingenieria. Sin embargo, hoy en día las Ciencias de la Vida se están tornando cada vez más cuantitativas y la necesidad de procesar miles o millones de datos en áreas como la Ecología, Genética o Epidemiología es creciente. Creemos también que la Programación como disciplina constituye una forma de promover el pensamiento lógico en estudiantes que se están formando en tareas de investigación y que tienen que ver con el método científico. Por otro lado, el estudio de conceptos básicos en Programación constituye un buen complemento para temas ofrecidos en cursos previos de Matemática básica en carreras sobre Ciencias Biológicas. La cartilla hace enfasis en conceptos generales y la lógica de programación sin estar asociado a un software en particular. Esto habilita la cartilla para ofrecer el curso sin el uso del computador. No obstante, también presentamos aplicaciones de los conceptos en Python y R, dos ambientes de programación usados hoy en día con alta frecuencia en ciencias biológicas y afines. Agredecemos al Programa de Biología de la Universidad CES por el apoyo en tiempo para la construcción de esta cartilla. También agredecemos a los docentes XXXXXX, y XXXXX de la misma Universidad por sus aportes en ideas, correcciones y precisiones realizadas al documento. "],["0.1-justificación.html", "0.1 Justificación", " 0.1 Justificación ¿Porqué es importante el tema en el contexto de una malla curricular de un pregrado en ciencias biológicas. Promueve la resolución de prooblemas de una forma lógica o ordenada Muchos problemas actuales e biogía requieren programación De acuerdo a Carvajal-Rodríguez (2015) la programación es importante en biología por Deacuerdo a Trejos-Buriticá (2018) la programaación en papel estimula el pensamiento lógico y la creatividad en los estudiantes Referencias Carvajal-Rodríguez, A. (2015). Incorporación de la Programación informática en el currículum de Biología. Magister, 27, 76–82. Trejos-Buriticá, O. I. (2018). Ejercicios en computador vs. Ejercicios en papel para enseñar a programar: Un estudio comparativo. Academia y Virtualidad, 11(1), 1–15. "],["0.2-descripción-del-contenido.html", "0.2 Descripción del contenido", " 0.2 Descripción del contenido Describir brevemente el tema de cada capítulo. "],["0.3-software.html", "0.3 Software", " 0.3 Software Mandar al lector al anexo donde se le explique al lector como instarlar el o los programas "],["1-obj.html", "Capítulo 1 Datos y objetos", " Capítulo 1 Datos y objetos La programación se basa o se nutre de información. Podemos decir que todo programa necesita información de entrada, el programa procesa o transforma dicha información y nos entrega como resultado nueva información. En Programación, la información viene representada en forma de datos. Podemos definir un dato como una pieza de información. Cuando registramos la edad de un persona, por ejemplo 34 años, dicho número es un dato, o cuando identificamos el tipo de sangre de una persona, por ejemplo O+, esto también es un dato. En este cápitulo estudiaremos los tipos de datos así como también los conceptos de variable, identificador y objeto, los cuales nos permitirán almacenar de datos. Finalizaremos con el estudio de operadores y expresiones que nos permiten manipular datos. "],["1.1-datos.html", "1.1 Datos", " 1.1 Datos Para entender la idea de dato, iniciemos con el concepto de atributo. Un atributo es un rasgo o característica que puede tomar un valor distinto de una cosa a otra o de una ejecución a otra. Por ejemplo, la edad de una persona vinculado a un sistema de salud puede ser 34 años, pero la edad de otra persona en el mismo sistema de salud puede ser 82 años. Así, la edad es un atributo, en este caso, de personas. El dato aparece cuando registramos el valor de un atributo para un sujeto o cosa en particular. A continuación estudiaremos los tipos de datos principales en Programación. 1.1.1 Datos numéricos Los datos numéricos incluyen números de dos clases: reales enteros. Los primeros son aquellos que tienen decimales, tal como 3.89, -10.5609, 0.00045 ó 1.231 x 106. Observe que estos pueden ser negativos o positivos, o pueden estar expresados en notación científica como el último ejemplo. Particularmente, la notación científica es útil para escribir números muy grandes o muy pequeños, y Programas como R o Python tenderan a mostrarnos resultados numéricos en notación científica cuando los resultados precisamente representen números muy pequeños o muy grandes. Algunos autores se refieren a los datos reales con otros nombres como números con punto decimal (Duque, Saint-Priest Velásquez, Segovia de Maya, &amp; Loaiza, 2017), números de doble precisión (double en ingles), ó de punto flotante (Trejos-Buriticá &amp; Muñoz-Guerrero, 2022). Para una descripción formal de estos términos revisar, por ejemplo, la sección 3.5.1 de Joyanes Aguilar (2008). En el ambiente R, las palabras double y numeric se utilizan para denotar este tipo. En el ambiente Python, la palabra float se usa para esto mismo. Por otra parte, los números enteros no tienen decimales tal como -10, -2, 0, 3, ó 40. En general con datos numéricos (enteros o con decimales) podemos realizar toda clase de operaciones matemáticas. 1.1.2 Datos de texto Los datos de texto son aquellos que escribimos como una secuencia de caracteres alfanúmericos (es decir, letras o números). Pueden estar conformados por un sólo carácter o por varios de ellos. Deben ir encerrados o delimitados por comillas. Algunos ejemplos son: “Z”, “aaa”, “b45”, “pablo”, “alberto”, “cc123ddY”, “a b”, “a-b”, “Pedro Lopez”, “67”. Del último ejemplo note que un dato de texto podría estar conformado de forma exclusiva por números, pero si están encerrados entre comillas, el computador los reconocerá como texto (y no como un número). A los datos de texto también se les llama cadenas de texto, en ingles, strings. Con datos de texto no se pueden realizar operaciones matemáticas. 1.1.3 Datos lógicos Los datos lógicos pueden ser sólo verdadero (V) o falso (F) y resultan de ejecutar expresiones lógicas. Una expresión lógica es aquella que evalua una condición y devuelve verdadero si se cumple la condición o falso si no se cumple. Suponga que en un sistema de salud interesa identificar cuando cierto atributo tal como la edad supere 60 años para generar una alerta para esas personas. Entonces la expresión lógica edad &gt; 60 generará V o F para cada persona en el sistema de acuerdo a si su edad es mayor a 60 años (V) o no (F). 1.1.4 Validando datos La validación de la clase de datos es un aspecto crítico en el desarrollo de software, ya que ayuda a garantizar que los datos utilizados en el programa sean coherentes y estén en el formato correcto. A continuación se detallan algunas de las razones por las cuales la validación de la clase de datos es importante: Ayuda a prevenir errores: La validación de la clase de datos permite detectar errores de forma temprana en el proceso de desarrollo de software, lo que ayuda a evitar que se propaguen y se conviertan en problemas mayores. Asegura la calidad de los datos: La validación de la clase de datos garantiza que los datos utilizados en el programa sean coherentes y estén en el formato correcto, lo que ayuda a garantizar la calidad de los resultados producidos por el programa. Mejora la seguridad: La validación de la clase de datos puede ayudar a prevenir vulnerabilidades de seguridad, ya que los datos validados pueden ser procesados de forma segura y evitar la inyección de código malicioso. Facilita el mantenimiento del software: La validación de la clase de datos ayuda a hacer que el software sea más fácil de mantener a lo largo del tiempo, ya que los datos utilizados en el programa están en un formato coherente y fácil de entender. En resumen, la validación de la clase de datos es importante porque ayuda a prevenir errores, asegura la calidad de los datos, mejora la seguridad y facilita el mantenimiento del software. 1.1.5 Ejercicios Defina que es un dato ¿Cuál es el aspecto principal a tener en cuenta para escribir un dato de texto? Si en un programa observa escrito F y luego ‘F’, explique cual es la diferencia entre estos dos formas. Cuál técnica tienden a usar lenguajes de programación como R o Python para imprimir o mostrar números muy pequeños (p.e., 0.000034) o muy grandes (p.e., 1’496,000). Complete la siguiente tabla con el tipo de dato: Dato Tipo 5 -4.38 Real 3.156 x 10-8 ‘Juan’ F Lógico V ‘2’ 5/4 0 \\(e^{\\log 3}\\) ‘7+5’ La siguiente tabla contiene información sobre peso al nacimiento de seis bebes que nacieron en cierto hospital. Indique el tipo de dato que esta registrado en cada columna. Tabla 1.1: Cinco atributos registrados a seis bebes al nacimiento. Bebe Género del bebe Peso del bebe (gr) Edad de la madre (años) Nacio con bajo peso 1 ‘fem’ 3597 34 FALSE 2 ‘masc’ 2390 26 TRUE 3 ‘fem’ 4002 33 FALSE 4 ‘masc’ 2943 39 FALSE 5 ‘masc’ 3032 30 FALSE 6 ‘fem’ 2039 37 TRUE Referencias Duque, D. F., Saint-Priest Velásquez, Y. E., Segovia de Maya, P. del R., &amp; Loaiza, D. F. (2017). Algoritmos y programación en pseudocódigo. Editorial Universidad Santiago de Cali. Joyanes Aguilar, L. (2008). Fundamentos de programación: Algoritmos y estructura de datos y objetos (4th ed.). McGraw-Hill. Trejos-Buriticá, O. I., &amp; Muñoz-Guerrero, L. E. (2022). Introducción a la programación con python. Ediciones de la U. "],["1.2-ident.html", "1.2 Identificadores y operadores", " 1.2 Identificadores y operadores 1.2.1 Identificadores Todo dato que se utilice en un programa de computador debe ser almacenado en memoria (Cairó-Battistutti, 2005). Para poder acceder a dichos datos almacenados debemos asignar nombres o identificadores a los datos (Cairó-Battistutti, 2005; Pinales-Delgado &amp; Velásquez-Amador, 2014). Esta acción de asignar un nombre a un dato también se puede entender como guardar un dato en un nuevo objeto o crear un nuevo objeto. Los nombres que actuan como identificadores son definidos por el usuario, sin embargo, tenga presente las siguientes consideraciones para asignar nombres: Debe ser una sóla palabra compuesta por letras o una mezcla de letras y números. P.e., x, x1, edad, Edad, peso89. Si el software es sensible a máyusculas y mínusculas, entonces edad será diferente de Edad. Particularmente R y Python lo son. El nombre no debe comenzar con un número. Se permite el guión bajo como carácter dentro del nombre. P.e., edad_inicial, peso_1, talla_basal. Además del guión bajo, en R el punto también se permite como carácter dentro del nombre. P.e, edad.inicial, talla.basal. Sin embargo, el punto no es un carácter permitido en Python para identificar objetos dado que el punto tiene un rol espacial en este sotfware. Es bueno verificar cuales carácteres no se permiten para crear nombres. No se permiten otros carácteres como ;, ,, -, *, \\, /, +, etc. ya que estos carácteres tienes funciones especiales en los software de programación. Se recomienda definir nombres cortos, pero informativos sobre el contenido del objeto. Cuando quiera representar dos pálabras en un nombre puede usar la estrategía de altas y bajas como: edadInicial o el guión bajo como: edad_inicial. Para indicar la asignación de un dato a un identificador en el pseudocódigo algunos autores utilizan el símbolo igual (=) (véase p.e., Cairó-Battistutti (2005) o Pinales-Delgado &amp; Velásquez-Amador (2014)) o una flecha (&lt;-) (véase p.e., Joyanes Aguilar (2008)) como se muestra en el siguiente ejemplo de pseudocódigo: a = 7 a &lt;- 7 En este ejemplo, en cualquiera de las dos líneas, al identificador a se le asigna el número 7 o el número 7 es guardado en el identificador a. En el caso de la flecha, note que la asignación se hace en el sentido de la flecha, es decir, el dato 7 es enviado hacía el objeto a y no lo contrario. En Python se utiliza el “igual” (=), mientras que en R se utiliza la flecha (&lt;-) para realizar asignaciones. En esta cartilla adoptaremos el símbolo “igual” (=) para indicar la acción de asignar en todo el pseudocódigo. Una vez un objeto ha sido creado con la asignación de un nombre o un identificador, ya podremos utilizar dicho identificador, en lugar de su contenido, en otras operaciones u otras acciones del programa como si fuera el contenido mismo. Considere el siguiente pseudocódigo en el cual usaremos la fórmula propuesta por Newton que cuantifica la fuerza de atracción gravitacional entre dos cuerpos que están alejados cierta distancia1. \\[F = M \\cdot m \\cdot G / d^2\\] En el pseudocódigo siguiente se crean algunos objetos y luego usamos los identificadores asignados para realizar el cálculo de la fórmula de Newton como si estuviéramos operando con los números mismos guardados en cada uno: Considere el siguiente pseudocódigo en el cual se crean algunos objetos y luego usamos los identificadores asignados para realizar un cálculo como si estuvieramos operando con los números mismos guardados en cada uno: G = 0.0000000000667384 # N*m^2 / kg^2 M = 654321 # kg m = 1234 # kg d = 94785677 # m M * m * G / (d*d) # N Existen dos ventajas en el uso de identificadores en un programa: Manipular un dato resulta más fácil al referirse al identificador que al dato mismo, sobre todo, cuando el dato tiene muchos carácteres. P.e., resultan más fácil escribir p / 2 que escribir 3.14158 / 2. Luego de que un programa este escrito, si queremos volver a utilizar el programa con algunos datos diferentes a los iniciales, sólo tenemos que cambiar el dato en el identificador correspondiente y al ejecutar el programa, los resultados cambiarán en concordancia con los nuevos datos. 1.2.2 Operadores Los operadores son signos que permiten representar relaciones entre datos y que generan un resultado. Existen diferentes clases de operadores. A continuación se describen estas clases. 1.2.2.1 Operadores aritméticos Estos son aquellos signos utilizados en expresiones matemáticas tales como suma (+), resta (-), multiplicación (*) o división (/). Una lista completa de estos operadores se presenta en seguida: Operador Significado Uso Ejemplo ** Potenciación Eleva una base a una potencia 2**3 = 8 / División Divide dos números 8.3/3 = 2.733 * Multiplicación Mútiplica dos números 2*3 = 6 div División entera Cociente de una división entre dos números 123 div 7 = 17 mod Módulo Residuo de la división entre dos números 123 mod 7 = 4 + Suma Suma dos números 4+5 = 9 - Resta Resta dos números 4-5 = -1 dar alguna explicación sobre Jerarquía con parentesís Cálculos matemáticos, expresiones lineales, jerarquía de las operaciones, ejercicios de práctica 1.2.2.2 Operadores relacionales Los operadores relacionales comparan datos de tipo numérico o de texto. La siguiente tabla presenta estos operadores. Operador Significado Uso Ejemplo &gt; Mayor que Evalua si un número es mayor que otro 5 &gt; 10 = F &lt; Menor que Evalua si un número es menor que otro 5 &lt; 10 = V = ó == Igual que Evalua si un número es igual otro 5 == 10 = F &lt;= Menor o igual que Evalua si un número es menor o igual a otro 5 &lt;= 10 = V &gt;= Mayor o igual que Evalua si un número es mayor o igual a otro 5 &gt;= 10 = F &lt;&gt; ó != Diferente Evalua si un número es diferente de otro 5 != 10 = V Las expresiones con operadores relacionales producen un valor lógico. Observe además que sólo los operadores igual a (==) y diferente de (!=) aplican para comparar datos de texto, mientras que todos permiten comparar datos numéricos o datos lógicos. 1.2.2.3 Operadores lógicos Los operadores lógicos permiten construir expresiones compuestas y también producen valores lógicos. La siguiente tabla presenta estos operadores. Operador Significado Ejemplo no Negación no Verdadero = Falso &amp; Conjunción de p y q (Intersección) Verdadero y Verdadero = Verdadero ó Disyunción de p y q (Unión) Verdadero ó Falso = Verdadero Observe que existe un sólo operador que no necesita de dos operandos, este es la negación (no). Los posibles resultados que nos podemos encontrar al plantear expresiones con los operadores lógicos se describen en la siguiente tabla, también conocida como tabla de verdad: P Q no P no Q P y Q P o Q TRUE TRUE FALSE FALSE TRUE TRUE FALSE TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE TRUE FALSE TRUE FALSE FALSE TRUE TRUE FALSE FALSE 1.2.3 Ejercicios ¿Qué es un identificador? ¿Qué ventajas tiene trabajar con identificadores en un programa? Considere las siguientes asignaciones e indique que valores quedan guardados en cada objeto al final. 3.1 a = 5 b = 2 c = 4 a = a + 3 b = b + 1 c = a * c 3.2 a = 4 b = 3 c = 2 a = 5 b = 1 c = 7 a = a + 2 b = b + 4 c = c + 6 3.3 a = 4 b = 5 c = 3 a = a / 2 b = a + b + 3 c = a + 4 + c b = 4*a c = 2*a - 2*b + c 3.4 a = 12 b = 8 c = (a + b) / 2 a = 2*c + a b = 2*a*c c = 3*a*b Referencias Cairó-Battistutti, O. (2005). Metodologia de la programación. Algoritmos, diagramas de flujo y programas (3rd ed.). Alfaomega. Joyanes Aguilar, L. (2008). Fundamentos de programación: Algoritmos y estructura de datos y objetos (4th ed.). McGraw-Hill. Pinales-Delgado, F. J., &amp; Velásquez-Amador, C. E. (2014). Algoritmos resueltos con diagramas de flujo y pseudocódigo (1st ed.). Universidad Autonoma de Aguascalientes. Se la quitado el menos a esta fórmula↩︎ "],["1.3-objetos.html", "1.3 Objetos", " 1.3 Objetos Un Programa Orientado Objetos, tal como Phyton o R, permite definir “contenederos” de datos con diferentes estructuras de organización. Vectores, matrices, data.frame o listas son algunos de. "],["2-graficos.html", "Capítulo 2 Gráficos", " Capítulo 2 Gráficos Bla bla "],["2.1-coordenadas.html", "2.1 Coordenadas", " 2.1 Coordenadas Bla bla "],["2.2-tipos-de-gráficos.html", "2.2 Tipos de gráficos", " 2.2 Tipos de gráficos Bla bla "],["3-algoritmo.html", "Capítulo 3 Algoritmos", " Capítulo 3 Algoritmos Un algoritmo es una serie de pasos que permiten resolver un problema. En nuestra vida cotidiana usamos, sin querer, algoritmos. Cuando vamos al supermercado, usalmente colectamos los artículos en cierto orden (p.e., primero la carne, luego productos de aseo, etc.) para finalmente pagar. Cuando cocinamos siguiendo una receta, aplicamos un algoritmo, etc. En un contexto computacional, un algoritmo es lo mismo, una serie de pasos que permiten resolver un problema, pero que además, debe poder transcribirse a un lenguaje de programación. En este capítulo estudiaremos conceptos básicos sobre el diseño de algoritmos. "],["3.1-características-de-un-algoritmo.html", "3.1 Características de un algoritmo", " 3.1 Características de un algoritmo En contexto computacional, un algoritmo debe ser: Preciso: Es decir, debe indicar el orden en el cual se realizarán cada uno de los pasos que finalmente resultan en la solución del problema. Definido: Esto implica que el resultado nunca debe cambiar bajo las mismas condiciones del problema, éste siempre debe ser el mismo. Finito: No se debe caer en repeticiones del proceso innecesarias; deberá iniciar y terminar en algun momento. "],["3.2-representación-de-un-algoritmo.html", "3.2 Representación de un algoritmo", " 3.2 Representación de un algoritmo Un algoritmo debería poder describirse en un lenguaje general y de manera precisa que facilite, luego, la transcripción a un lenguaje de programación específico tal como C++, C#, Phyton, R, etc. A dicho lenguaje general se le llama pseudocódigo. 3.2.1 Pseudocódigo El baljakdfjakdfjdkfjkd Pseudocodigo para el calculo del volumen de un cubo Entradas: A: altura (real) B: ancho (real) C: profundidad (real) Salidas: V: Volumen Inicio: 1. Leer las medidas A, B y C 2. Realizar el producto A*B*C y guardarlo en V 3. Escribir el resultado V Fin bakjfakdfjadk Calculo del volumen de un cubo ---- Informacion requerida ---- Entradas: A: altura (real) B: ancho (real) C: profundidad (real) Salidas: V: Volumen Pseudocodigo ---- Inicio 1. Leer las medidas A, B y C 2. Realizar el producto A*B*C y guardarlo en V 3. Escribir el resultado V Fin 3.2.2 Diagramas de flujo Bla bla "],["3.3-prueba-de-escritorio.html", "3.3 Prueba de escritorio", " 3.3 Prueba de escritorio Bla bla "],["3.4-recomendaciones-para-el-diseño-de-algoritmos.html", "3.4 Recomendaciones para el diseño de algoritmos", " 3.4 Recomendaciones para el diseño de algoritmos Estudie y entienda el contexto del problema a resolver. Luego, identifique de manera clara cual es: la información de entrada, cual será el proceso de transformación de dicha información y cual será el resultado que requiere ser entregado o impreso: Separe el proceso de transformación en componentes o pasos claramente definidos. Si es necesario, subdivida los pasos definidos en la parte (2) en sub-pasos. Identifique con letras o palabras cortas los valores relevantes que aparecieron en (1), (2) y (3). Reuna la información generada en (1), (2) y (3) y escriba el pseudocódigo de su algoritmo utilizando los identificadores definidos en (4). Realice una prueba manual. Asigne valores a la información de entrada y recorra de forma manual el pseudocódigo hasta finalizarlo. Valide que el resultado de dicho recorrido sea el esperado. Transcriba el pseudocódigo a un lenguaje de programación tal como Python o R. Realice pruebas a su programa. Similar a la prueba realizada en el paso (6) pero con el computador. Manual de usuario: Documente su programa para que pueda ser usado por otras personas. Publicación: Revise como otras personas tendrán acceso a su programa. "],["3.5-funciones.html", "3.5 Funciones", " 3.5 Funciones Bla bla "],["4-tiposProg.html", "Capítulo 4 Tipos de algoritmos", " Capítulo 4 Tipos de algoritmos Bla bla "],["4.1-progSec.html", "4.1 Algoritmos secuenciales", " 4.1 Algoritmos secuenciales 4.1.1 pseudocódigo Bla bla 4.1.2 Diagrama de flujo Bla bla 4.1.3 probando el algoritmo Bla bla "],["4.2-progCond.html", "4.2 Programas con condicionales", " 4.2 Programas con condicionales Bla bla 4.2.1 pseudocódigo Bla bla 4.2.2 Diagrama de flujo Bla bla 4.2.3 probando el algoritmo Bla bla "],["4.3-ciclos.html", "4.3 Programas con ciclos", " 4.3 Programas con ciclos Bla bla 4.3.1 pseudocódigo Bla bla 4.3.2 Diagrama de flujo Bla bla 4.3.3 probando el algoritmo "],["5-conclu.html", "Capítulo 5 Conclusiones", " Capítulo 5 Conclusiones Bla bla "],["A-conceptos-de-matemáticas.html", "A Conceptos de matemáticas ", " A Conceptos de matemáticas "],["A.1-sumatorias.html", "A.1 Sumatorias", " A.1 Sumatorias En la mayor parte de procesos estadísticos es necesario manipular conjuntos de observaciones numéricas. Para facilitar las operaciones se han desarrollado notaciones para abreviar tales como la notación de sumatoria o productoria. "],["A.2-propiedades-de-potencias.html", "A.2 Propiedades de potencias", " A.2 Propiedades de potencias Bla bla "],["A.3-propiedades-de-logaritmos.html", "A.3 Propiedades de logaritmos", " A.3 Propiedades de logaritmos Bla bla "],["B-iniciando-con-r.html", "B Iniciando con R", " B Iniciando con R Bla bla "],["B.1-instalación.html", "B.1 Instalación", " B.1 Instalación Bla bla "],["B.2-cálculos-en-consola.html", "B.2 Cálculos en consola", " B.2 Cálculos en consola Bla bla "],["B.3-datos-en-r.html", "B.3 Datos en R", " B.3 Datos en R B.3.1 Datos numéricos Para escribir datos numéricos en R con decimales use el “punto” como el separador decimal. Aquí algunos ejemplos: # Codigo R ---- # Ejemplos para mostrar escritura de numeros con decimales 3.89 -10.5609 0.045 Para escribir números con notación científica en R utilice la e seguida del exponente (negativo o positivo). Por ejemplo, si quiere escribir el número -0.00459 = -4.59 x 10-3 esto se escribiría en R como -4.59e-3. A continuación algunos ejemplos: # Codigo R ---- # Ejemplos para mostrar escritura de numeros con decimales y # con notacion cientifica 1.231e6 # 1.231 x 10^6 -4.59e-3 # -4.59 x 10^(-3) 67.096e7 # 67.096 x 10^7 Valide la clase de un número usando el comando class. Ejemplos: # Codigo R ---- # Ejemplos para mostrar el uso del comando class para # preguntar por la clase de un elemento: class(3.89) ## [1] &quot;numeric&quot; class(1.231e6) ## [1] &quot;numeric&quot; La clase numeric es equivalente a los números reales (con decimales) descritos atrás. Para escribir números enteros en R sólo escriba los números y listo. Aquí algunos ejemplos: # Codigo R ---- # Ejemplos para mostrar escritura de numeros enteros 4 -6 0 No obstante, el hecho de que escribamos números sin decimales, no garantiza que R los reconozca como tal. De hecho, la mayoría del tiempo, R tiende a reconocer los números como de clase numeric. Observe: # Codigo R ---- # ¿cual es la clase de numeros escritos sin decimales? class(3) ## [1] &quot;numeric&quot; class(-2) ## [1] &quot;numeric&quot; Para forzar a que R reconozca un número como entero se debe poner la letra L seguida del número: # Codigo R ---- # Letra L para forzar la clase &#39;entera&#39;: class(3L) ## [1] &quot;integer&quot; class(-2L) ## [1] &quot;integer&quot; En la práctica, sin embargo, no es importante hacer esta diferenciación a menos que se este manejando muchos (millones) de datos. En general, un número real tenderá a ocupar más espacio en memoria que uno entero. De resto, cualquier operación se puede realizar del mismo modo con ambas clases. B.3.2 Datos de texto En R los datos de texto se escriben entre comillas. Pueden ser dobles o sencillas, aunque R los imprimirá siempre con comillas dobles. Aquí algunos ejemplos y como se imprimen en la consola de R: # Codigo R ---- # Escritura de valores de texto &quot;Puma concolor&quot; ## [1] &quot;Puma concolor&quot; &#39;Puma concolor&#39; ## [1] &quot;Puma concolor&quot; &#39;B456&#39; ## [1] &quot;B456&quot; &quot;El 6 es un numero &#39;par&#39;&quot; ## [1] &quot;El 6 es un numero &#39;par&#39;&quot; &#39;6&#39; ## [1] &quot;6&quot; &#39;7+8&#39; ## [1] &quot;7+8&quot; La clave para escribir un dato de texto es respetar las comillas de apertura y de cierre. B.3.3 Datos lógicos En R los datos lógicos se escriben como TRUE (Verdadero) o FALSE (Falso). También sirve escribir, de forma abreviada, sólo T (Verdadero) o F (Falso). Observe la escritura de estos valores y su impresión en consola: # Codigo R ---- # Escritura de valores logicos TRUE ## [1] TRUE T ## [1] TRUE FALSE ## [1] FALSE F ## [1] FALSE Los datos lógicos se originan cuando se evaluan expresiones lógicas tal como: # Codigo R ---- # Escritura de valores logicos 5 &gt; 2 # ¿el 5 es mayor que 2? ## [1] TRUE 10 &lt; 5 # ¿el 10 es menor que 5? ## [1] FALSE Estudiaremos en detalle expresiones lógicas que involucran datos numéricos y de texto en la sección XXXXXXX. B.3.4 Palabras reservadas En R tenemos ciertas palabras que están reservadas para significar resultados (datos) especiales y por ende no van entre comillas y deben escribir tal como se indican. Algunas de estas son: Palabra reservada Descripción TRUE Verdadero FALSE Falso NA Dato perdido NaN No es número NULL Elemento Nulo, no existe Inf Infinito -Inf Menos infinito B.3.5 Ejercicios En R, escriba de tres formas diferentes el número 4.5625 en notación científica manteniendo tres decimales. (Ayuda. una forma sería: 4563e-3) En R, escriba el número \\(\\pi\\) (3.1415927) en notación científica de dos maneras diferentes y manteniendo tres decimales. En R valide la clase (class) de los siguientes números: -3 y -3L, 0, 0L 3.78, 45.124e-6. En R escriba el texto 'Solo se: \"que nada se\"'; 'Todos los modelos son incorrectos, algunos son útiles' Ejercicios de logicos en R "],["C-iniciando-con-phyton.html", "C Iniciando con Phyton", " C Iniciando con Phyton Phyton es un software de alto nivel para programación, de propósito general y de libre distribución. Phyton viene con su propio editor, sin embargo, este es muy básico y se recomienda utilizar algunos otros con mayores atributos que mejoran sustancialmente el manejo del lenguaje. Algunos de estos editores se les conoce como ambientes de desarrollo integrado (IDE, de sus siglas en inglés). Aquí recomendaremos dos editores o IDE’s para Python: PyCharm y Visual Studio Code. En las secciones siguientes http://tpcg.io/_IEWK4L https://geekflare.com/es/online-python-compiler/ "],["C.1-instalación-1.html", "C.1 Instalación", " C.1 Instalación C.1.1 Descargando Python Para descargar el ejecutable (.exe) de Python realice lo siguiente: Dirijase al sitio web oficial de Python: https://www.python.org/downloads/windows/ haga clic en el enlace de descarga que corresponda a su versión de Windows y descargue el archivo ejecutable (.exe). C.1.2 Instalando Python Luego de tener el ejecutable descargado, para instalar Python en su computador realice lo siguiente: Haga doble clic en el archivo ejecutable (.exe) que fue descargado Seleccione la opción “Add Python x.x to PATH” (x.x corresponde a la versión que usted está instalando). Haga clic en “Install Now”. Espere a que la instalación termine. Para verificar la instalación: Abra el símbolo del sistema (cmd). Escribe “python” y presiona Enter. Si todo está bien instalado, debería ver la versión de Python que acaba de instalar. Ahora debería tener instalado Python en tu sistema Windows y estar listo para comenzar a trabajar con él. C.1.3 Mejorando la instalación Si quiere trabajar con paquetes externos, te recomiendo instalar pip, que es el gestor de paquetes de Python. Puedes hacerlo siguiendo estas instrucciones: PRIMERO Descarga get-pip.py: a. Ve al sitio web oficial de pip: https://pip.pypa.io/en/stable/installation/ b. Haz clic en “Download get-pip.py”. SEGUNDO Instala pip: a. Abre el símbolo del sistema (cmd). b. Navega hasta el directorio donde guardaste get-pip.py. c. Escribe “python get-pip.py” y presiona Enter. d. Espera a que la instalación termine. "],["C.2-cálculos-en-consola-1.html", "C.2 Cálculos en consola", " C.2 Cálculos en consola Bla bla "],["C.3-datos-en-python.html", "C.3 Datos en Python", " C.3 Datos en Python C.3.1 Datos numéricos Al igual que en R, para escribir datos con punto decimal en Python, utilice el caracter “punto” como separador decimal. # Codigo Python ---- # Ejemplos para mostrar escritura de numeros con decimales 3.89 -10.5609 0.045 Para escribir números con notación científica en Python, aplique la misma estrategía que en R, utilice la e seguida del exponente (negativo o positivo). Por ejemplo, si quiere escribir el número -0.00459 = -4.59 x 10-3 esto se escribiría en Python como -4.59e-3. A continuación algunos ejemplos: # Codigo Python ---- # Ejemplos para mostrar escritura de numeros con punto decimal # y con notacion cientifica: 1.231e6 # 1.231 x 10^6 -4.59e-3 # -4.59 x 10^(-3) C.3.2 Datos enteros Para escribir datos enteros en Python, simplemente no utilice el punto. Aquí algunos ejemplos: # Codigo Python ---- # Ejemplos para mostrar escritura de numeros enteros: 40 5 -10 En Python, el comando type recibe un dato y devuelve su tipo. Por ejemplo: # Codigo Python # Ejemplos para validar tipos de datos con el comando &#39;type&#39; type(10) ## &lt;class &#39;int&#39;&gt; type(-3) ## &lt;class &#39;int&#39;&gt; type(10.) ## &lt;class &#39;float&#39;&gt; El texto int es la abreviación de integer, mientras que el texto float es la abreviación de un número real o con punto decimal. Observe en el último ejemplo que al usar el “punto” en el número 10., Python lo considera directamente como un número con punto decimal. En otro ejemplo, ejecute el siguiente código Python para validar el tipo de dato en cada caso: # Codigo Python ----- # Ejemplos para validar tipos de datos con el comando &#39;type&#39; type(10000) type(1e4) También podemos usar el comando isinstance para validar si un dato es de cierto tipo o clase. Observe el siguiente ejemplo: # Codigo Python ----- # Ejemplo de uso del comando &#39;isinstance&#39; para validar un tipo de dato isinstance(4, int) # el 4 es un entero?&#39; ## True isinstance(4., int) # el 4. es un entero?&#39; ## False isinstance(4., float) # el 4. es numerico (double o float)?&#39; ## True C.3.3 Datos de texto En Python, los datos de texto, al igual que en R, se escriben entre comillas, dobles o sencillas. Ejecute el siguiente código: # Codigo Python ----- # Ejemplos para mostrar escritura de datos de texto: &quot;Hola mundo&quot; &#39;Hola mundo&#39; &#39;45&#39; &#39;45 + 89&#39; &#39;56ABg&#39; Al usar el comando type sobre un dato de texto, Python devuelve str, la abreviación de string (cadena). Aquí algunos ejemplos: # Codigo Python ----- # Ejemplos para validar tipos de datos con el comando &#39;type&#39; type(&quot;Hola mundo&quot;) ## &lt;class &#39;str&#39;&gt; type(&#39;45&#39;) ## &lt;class &#39;str&#39;&gt; C.3.4 Datos lógicos En Python, los datos lógicos se escriben como True y False. Así, sin comillas, con la primera mayúscula y las demas minúsculas. # Codigo Python ----- # Ejemplos para escribir valores logicos: False True Al usar el comando type sobre un dato lógico, Python devuelve bool, la abreviación de boolean (booleano ó lógico). Aquí algunos ejemplos: # Codigo Python ----- # Ejemplos para validar tipos de datos con el comando &#39;type&#39; type(True) ## &lt;class &#39;bool&#39;&gt; type(&quot;True&quot;) ## &lt;class &#39;str&#39;&gt; C.3.5 Palabras reservadas Python tiene ciertas palabras import keyword print (keyword.kwlist) ## [&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;async&#39;, &#39;await&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;] Armar una tabla como esta para estos resultados equivalentes en Python: Palabra reservada Descripción True Verdadero False Falso None Dato perdido C.3.6 Ejercicios En Python, escriba de tres formas diferentes el número 4.5625 en notación científica manteniendo tres decimales. (Ayuda. una forma sería: 4563e-3) En Python, escriba el número \\(\\pi\\) (3.1415927) en notación científica de dos maneras diferentes y manteniendo tres decimales. En Python valide la clase (type) de los siguientes números: -3 y -3L, 0, 0L 3.78, 4. 45.124e-6. Ejercicios de texto Ejercicios de logicos "],["referencias.html", "Referencias", " Referencias Cairó-Battistutti, O. (2005). Metodologia de la programación. Algoritmos, diagramas de flujo y programas (3rd ed.). Alfaomega. Carvajal-Rodríguez, A. (2015). Incorporación de la Programación informática en el currículum de Biología. Magister, 27, 76–82. Duque, D. F., Saint-Priest Velásquez, Y. E., Segovia de Maya, P. del R., &amp; Loaiza, D. F. (2017). Algoritmos y programación en pseudocódigo. Editorial Universidad Santiago de Cali. Joyanes Aguilar, L. (2008). Fundamentos de programación: Algoritmos y estructura de datos y objetos (4th ed.). McGraw-Hill. Pinales-Delgado, F. J., &amp; Velásquez-Amador, C. E. (2014). Algoritmos resueltos con diagramas de flujo y pseudocódigo (1st ed.). Universidad Autonoma de Aguascalientes. Trejos-Buriticá, O. I. (2018). Ejercicios en computador vs. Ejercicios en papel para enseñar a programar: Un estudio comparativo. Academia y Virtualidad, 11(1), 1–15. Trejos-Buriticá, O. I., &amp; Muñoz-Guerrero, L. E. (2022). Introducción a la programación con python. Ediciones de la U. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
